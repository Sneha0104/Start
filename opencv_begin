The following links describe a set of basic OpenCV tutorials. All the source code mentioned here is provided as part of the OpenCV regular releases, so check before you start copying & pasting the code. The list of tutorials below is automatically generated from reST files located in our GIT repository.

As always, we would be happy to hear your comments and receive your contributions on any tutorial.

Introduction to OpenCV

You will learn how to setup OpenCV on your computer

The Core Functionality (core module)

Here you will learn the about the basic building blocks of this library. A must read for understanding how to manipulate the images on a pixel level.

Image Processing (imgproc module)

In this section you will learn about the image processing (manipulation) functions inside OpenCV.

High Level GUI and Media (highgui module)

This section contains valuable tutorials on how to use the built-in graphical user interface of the library.

Image Input and Output (imgcodecs module)

These tutorials show how to read and write images using imgcodecs module.

Video Input and Output (videoio module)

These tutorials show how to read and write videos using videio module.

Camera calibration and 3D reconstruction (calib3d module)

Although most of our images are in a 2D format they do come from a 3D world. Here you will learn how to find out 3D world information from 2D images.

2D Features framework (feature2d module)

Learn about how to use the feature points detectors, descriptors and matching framework found inside OpenCV.

Video analysis (video module)

Here you will find algorithms usable on your video streams like motion extraction, feature tracking and foreground extractions.

Object Detection (objdetect module)

Ever wondered how your digital camera detects people's faces? Look here to find out!

Deep Neural Networks (dnn module)

These tutorials show how to use dnn module effectively.

Machine Learning (ml module)

Use the powerful machine learning classes for statistical classification, regression and clustering of data.

Computational photography (photo module)

Use OpenCV for advanced photo processing.

Images stitching (stitching module)

Learn how to create beautiful photo panoramas and more with OpenCV stitching pipeline.

GPU-Accelerated Computer Vision (cuda module)

Squeeze out every little computational power from your system by utilizing the power of your video card to run the OpenCV algorithms.

OpenCV iOS

Run OpenCV and your vision apps on an iDevice

OpenCV Viz

These tutorials show how to use Viz module effectively.
Enumerations
enum  	cv::MorphShapes { 
  cv::MORPH_RECT = 0, 
  cv::MORPH_CROSS = 1, 
  cv::MORPH_ELLIPSE = 2 
}
 	shape of the structuring element More...
 
enum  	cv::MorphTypes { 
  cv::MORPH_ERODE = 0, 
  cv::MORPH_DILATE = 1, 
  cv::MORPH_OPEN = 2, 
  cv::MORPH_CLOSE = 3, 
  cv::MORPH_GRADIENT = 4, 
  cv::MORPH_TOPHAT = 5, 
  cv::MORPH_BLACKHAT = 6, 
  cv::MORPH_HITMISS = 7 
}
 	type of morphological operation More...
 
Functions
void 	cv::bilateralFilter (InputArray src, OutputArray dst, int d, double sigmaColor, double sigmaSpace, int borderType=BORDER_DEFAULT)
 	Applies the bilateral filter to an image. More...
 
void 	cv::blur (InputArray src, OutputArray dst, Size ksize, Point anchor=Point(-1,-1), int borderType=BORDER_DEFAULT)
 	Blurs an image using the normalized box filter. More...
 
void 	cv::boxFilter (InputArray src, OutputArray dst, int ddepth, Size ksize, Point anchor=Point(-1,-1), bool normalize=true, int borderType=BORDER_DEFAULT)
 	Blurs an image using the box filter. More...
 
void 	cv::buildPyramid (InputArray src, OutputArrayOfArrays dst, int maxlevel, int borderType=BORDER_DEFAULT)
 	Constructs the Gaussian pyramid for an image. More...
 
void 	cv::dilate (InputArray src, OutputArray dst, InputArray kernel, Point anchor=Point(-1,-1), int iterations=1, int borderType=BORDER_CONSTANT, const Scalar &borderValue=morphologyDefaultBorderValue())
 	Dilates an image by using a specific structuring element. More...
 
void 	cv::erode (InputArray src, OutputArray dst, InputArray kernel, Point anchor=Point(-1,-1), int iterations=1, int borderType=BORDER_CONSTANT, const Scalar &borderValue=morphologyDefaultBorderValue())
 	Erodes an image by using a specific structuring element. More...
 
void 	cv::filter2D (InputArray src, OutputArray dst, int ddepth, InputArray kernel, Point anchor=Point(-1,-1), double delta=0, int borderType=BORDER_DEFAULT)
 	Convolves an image with the kernel. More...
 
void 	cv::GaussianBlur (InputArray src, OutputArray dst, Size ksize, double sigmaX, double sigmaY=0, int borderType=BORDER_DEFAULT)
 	Blurs an image using a Gaussian filter. More...
 
void 	cv::getDerivKernels (OutputArray kx, OutputArray ky, int dx, int dy, int ksize, bool normalize=false, int ktype=CV_32F)
 	Returns filter coefficients for computing spatial image derivatives. More...
 
Mat 	cv::getGaborKernel (Size ksize, double sigma, double theta, double lambd, double gamma, double psi=CV_PI *0.5, int ktype=CV_64F)
 	Returns Gabor filter coefficients. More...
 
Mat 	cv::getGaussianKernel (int ksize, double sigma, int ktype=CV_64F)
 	Returns Gaussian filter coefficients. More...
 
Mat 	cv::getStructuringElement (int shape, Size ksize, Point anchor=Point(-1,-1))
 	Returns a structuring element of the specified size and shape for morphological operations. More...
 
void 	cv::Laplacian (InputArray src, OutputArray dst, int ddepth, int ksize=1, double scale=1, double delta=0, int borderType=BORDER_DEFAULT)
 	Calculates the Laplacian of an image. More...
 
void 	cv::medianBlur (InputArray src, OutputArray dst, int ksize)
 	Blurs an image using the median filter. More...
